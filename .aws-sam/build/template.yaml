AWSTemplateFormatVersion: '2010-09-09'
Description: 'api-gateway-test

  Sample SAM Template for api-gateway-test

  '
Globals:
  Api:
    OpenApiVersion: '3.0.1'
Parameters:
  ApiBasePath:
    Default: v1
    Description: Base path of the api. 'v1' - example.co.uk/v1/endpoints
    Type: String
  DomainName:
    Default: api.esource.roweitdev.co.uk
    Description: Domain name to call the api from.
    Type: String
  HostedZoneName:
    Default: esource.roweitdev.co.uk.
    Description: Name of the desired hosted zone.
    Type: String
Resources:
  ApiGatewayAuthorizerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::Sub: ${CustomAuthorizerFunction.Arn}
          Version: '2012-10-17'
        PolicyName: InvokeAuthorizerFunction
    Type: AWS::IAM::Role
  CustomAuthorizerFunction:
    Properties:
      CodeUri: CustomAuthorizerFunction
      Handler: authorizer.handler
      Role:
        Fn::Sub: ${CustomAuthorizerFunctionRole.Arn}
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  CustomAuthorizerFunctionRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
        Version: '2012-10-17'
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
    Type: AWS::IAM::Role
  GetUsersFunction:
    Properties:
      CodeUri: GetUsersFunction
      Handler: app.lambdaHandler
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function
  GetUsersLambdaPermission:
    DependsOn:
    - ServerlessRestAPI
    - GetUsersFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName:
        Ref: GetUsersFunction
      Principal: apigateway.amazonaws.com
    Type: AWS::Lambda::Permission
  ServerlessRestAPI:
    Properties:
      Auth:
        Authorizers:
          LambdaTokenAuthorizer:
            FunctionArn:
              Fn::GetAtt:
              - CustomAuthorizerFunction
              - Arn
            FunctionInvokeRole:
              Fn::GetAtt:
              - CustomAuthorizerFunctionRole
              - Arn
            FunctionPayloadType: TOKEN
            Identity:
              Headers:
              - Authorization
              ReauthorizeEvery: 300
        DefaultAuthorizer: LambdaTokenAuthorizer
      DefinitionBody:
        definitions:
          User:
            description: A generic user
            properties:
              id:
                description: ID of the user
                type: number
              name:
                description: Name of the user
                type: string
            required:
            - tip
            type: object
        info:
          title: 'ESOURCE Sample Response API #3 (Authorized)'
          version: '0.1'
        paths:
          /users:
            get:
              description: Gets full list of users
              produces:
              - application/json
              responses:
                '200':
                  description: The request was successful.
                  schema:
                    items:
                      $ref: '#/definitions/User'
                    type: array
              security:
              - CustomAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
          /users/{id}:
            get:
              description: Gets a specific user
              parameters:
              - in: path
                name: id
                required: true
                type: string
              produces:
              - application/json
              responses:
                '200':
                  description: The request was successful.
                  schema:
                    items:
                      $ref: '#/definitions/User'
              security:
              - CustomAuthorizer: []
              x-amazon-apigateway-integration:
                httpMethod: POST
                passthroughBehavior: when_no_match
                type: aws_proxy
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetUsersFunction.Arn}/invocations
        schemes:
        - https
        securityDefinitions:
          CustomAuthorizer:
            in: header
            name: Authorization
            type: apiKey
            x-amazon-apigateway-authorizer:
              authorizerCredentials:
                Fn::Sub: ${ApiGatewayAuthorizerRole.Arn}
              authorizerResultTtlInSeconds: 60
              authorizerUri:
                Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${CustomAuthorizerFunction.Arn}/invocations
              type: token
            x-amazon-apigateway-authtype: custom
        swagger: '2.0'
      EndpointConfiguration: REGIONAL
      StageName: dev
    Type: AWS::Serverless::Api
Transform: AWS::Serverless-2016-10-31
