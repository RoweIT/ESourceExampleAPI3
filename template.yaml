AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: 'api-gateway-test

  Sample SAM Template for api-gateway-test

  '
Globals:
  Api:
    OpenApiVersion: '3.0.1'

Parameters:
  ApiBasePath:
    Default: v1
    Description: Base path of the api. 'v1' - example.co.uk/v1/endpoints
    Type: String
  DomainName:
    Default: api.esource.roweitdev.co.uk
    Description: Domain name to call the api from.
    Type: String
  HostedZoneName:
    Default: esource.roweitdev.co.uk.
    Description: Name of the desired hosted zone.
    Type: String
  SSMCertificateArn:
    Description: 'Arn of the esource certificate created via terraform.'
    Type: AWS::SSM::Parameter::Value<String>
    Default: '/esource/config/ESOURCE_api_certificate_arn'

Resources:
  ApiGatewayAuthorizerRole:
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - apigateway.amazonaws.com
        Version: '2012-10-17'
      Policies:
      - PolicyDocument:
          Statement:
          - Action:
            - lambda:InvokeAsync
            - lambda:InvokeFunction
            Effect: Allow
            Resource:
              Fn::Sub: ${CustomAuthorizerFunction.Arn}
          Version: '2012-10-17'
        PolicyName: InvokeAuthorizerFunction
    Type: AWS::IAM::Role

  GetUsersFunction:
    Properties:
      CodeUri: src/
      Handler: app.getAllUsers
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function

  GetUsersLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - GetUsersFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUsersFunction
      Principal: apigateway.amazonaws.com

  GetUserFunction:
    Properties:
      CodeUri: src/
      Handler: app.getUser
      Runtime: nodejs10.x
    Type: AWS::Serverless::Function

  GetUserLambdaPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - ServerlessRestAPI
    - GetUserFunction
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetUserFunction
      Principal: apigateway.amazonaws.com

  ServerlessRestAPI:
    Type: AWS::Serverless::Api
    Properties:
      StageName: dev
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        'Fn::Transform':
          Name: 'AWS::Include'
          Parameters:
            Location: './openapi3.yaml'

  APIBasePathMapping:
    DependsOn: ServerlessRestAPIdevStage #Required - Needs to wait for SAM to create stage before mapping {LOGICAL_API_NAME}{Stage}Stage
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      DomainName: !Ref DomainName
      RestApiId: !Ref ServerlessRestAPI
      Stage: dev
      BasePath: !Ref ApiBasePath
